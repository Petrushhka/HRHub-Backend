#
server:
  port: 8080
  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

spring:
  application:
    name: hr-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:prod}

cloud:
  config:
    enabled: false
  gateway:
    discovery:
      locator:
        enabled: false

  # PostgreSQL Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/hrdb}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:5}
      minimum-idle: ${DB_MIN_IDLE:2}
      idle-timeout: ${DB_IDLE_TIMEOUT:60000}
      max-lifetime: ${DB_MAX_LIFETIME:180000}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      leak-detection-threshold: ${DB_LEAK_DETECTION_THRESHOLD:20000}

  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:0}

  # AWS S3 Configuration
  cloud:
    aws:
      s3:
        bucket: ${AWS_S3_BUCKET:hrhub-bucket}
        region: ${AWS_REGION:ap-northeast-2}
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      region:
        static: ${AWS_REGION:ap-northeast-2}
      stack:
        auto: false

  # Email Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: ${MAIL_HOST:smtp.gmail.com}

# JWT Configuration
jwt:
  expiration: ${JWT_EXPIRATION:1800000}
  secretKey: ${JWT_SECRET_KEY}
  secretKeyRt: ${JWT_SECRET_KEY_RT}
  expirationRt: ${JWT_EXPIRATION_RT:604800000}

# Eureka Client Configuration
eureka:
  client:
    register-with-eureka: ${EUREKA_REGISTER:true}
    fetch-registry: ${EUREKA_FETCH_REGISTRY:true}
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ip-address:${spring.application.name}}:${spring.application.instance_id:${random.value}}
    lease-renewal-interval-in-seconds: ${EUREKA_LEASE_RENEWAL:30}
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRATION:90}

# Management and Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS:health,info,metrics}
      base-path: /actuator
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:when-authorized}
  info:
    env:
      enabled: true

# Springdoc (Swagger) Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    groups:
      enabled: true
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
    disable-swagger-default-url: true
  show-actuator: ${SWAGGER_SHOW_ACTUATOR:false}

# OpenAI Configuration
openai:
  api-key: ${OPENAI_API_KEY}
  model: ${OPENAI_MODEL:gpt-3.5-turbo}
  max-tokens: ${OPENAI_MAX_TOKENS:1000}

# OAuth Configuration
oauth:
  kakao:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    redirect-uri: ${KAKAO_REDIRECT_URI:http://localhost:8080/oauth/kakao/callback}
    authorization-uri: ${KAKAO_AUTH_URI:https://kauth.kakao.com/oauth/authorize}
    token-uri: ${KAKAO_TOKEN_URI:https://kauth.kakao.com/oauth/token}
    user-info-uri: ${KAKAO_USER_INFO_URI:https://kapi.kakao.com/v2/user/me}

# Logging Configuration
logging:
  level:
    com.playdata: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Application Specific Configuration
app:
  name: ${APP_NAME:HR Hub Service}
  version: ${APP_VERSION:1.0.0}
  description: ${APP_DESCRIPTION:Human Resources Management System}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://yourdomain.com}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}

weather:
  api:
    key: ZXtHl7IjyIssn+uPYkhLiyHlbIyxO1Zj89v0YwTWPGkSka2+/t47TsClb/2z8sfd5pLYfRfGmyVC6aMM4UgrZg==
#    key: ZXtHl7IjyIssn%2BuPYkhLiyHlbIyxO1Zj89v0YwTWPGkSka2%2B%2Ft47TsClb%2F2z8sfd5pLYfRfGmyVC6aMM4UgrZg%3D%3D
    base-url: http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0
#  profiles:
#    active: local